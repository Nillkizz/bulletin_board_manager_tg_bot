"""–ú–æ–¥—É–ª—å —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
import asyncio
from enum import Enum
from operator import itemgetter

from telebot.async_telebot import AsyncTeleBot
from telebot.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from tinydb import Query
from utils.database import AdminDatabase, TagDatabase
from utils.database import memory as messages
from utils.helpers import edit_message, get_html_text_of_message, get_message_text_type, get_user_link, make_meta_string, strip_hashtags
from utils.logger import log

from handlers.admin_configs import (check_permissions, get_params_for_message,
                                    get_send_procedure, string_builder)
from handlers.group import create_markup

db_tags = TagDatabase()
db_admins = AdminDatabase()


def get_decline_command(action: str) -> str:
    """ Returns decline command from action """
    return '/post_processing decline ' + action


class DeclineCommands(Enum):
    """ Enum of decline commands """
    MAT = {
        'command': get_decline_command('MAT'),
        'text': '–ú–∞—Ç',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.',
    }
    MORE_THAN_ONCE = {
        'command': get_decline_command('MORE_THAN_ONCE'),
        'text': '–ë–æ–ª—å—à–µ 1-–≥–æ —Ä–∞–∑–∞',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –±–æ–ª–µ–µ 1-–≥–æ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.',
    }
    LINK = {
        'command': get_decline_command('LINK'),
        'text': '–°—Å—ã–ª–∫–∞',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
    }
    PHOTO_OR_FILE = {
        'command': get_decline_command('PHOTO_OR_FILE'),
        'text': '–§–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏ —Ñ–∞–π–ª–æ–≤.',
    }
    AUDIO_OR_VIDEO = {
        'command': get_decline_command('AUDIO_OR_VIDEO'),
        'text': '–ê—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ- –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π.',
    }
    BOT = {
        'command': get_decline_command('BOT'),
        'text': '–ë–æ—Ç',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ª—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞ –æ—Ç –±–æ—Ç–æ–≤.',
    }
    ANIMATED_EMOJI = {
        'command': get_decline_command('ANIMATED_EMOJI'),
        'text': '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ emoji',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω—ã –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ emoji –≤ —Ç–µ–∫—Å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.',
    }
    MORE_THAN_FIVE_EMOJI = {
        'command': get_decline_command('MORE_THAN_FIVE_EMOJI'),
        'text': '–ë–æ–ª–µ–µ 5 emoji',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ 5 emoji –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.',
    }
    HASHTAGS = {
        'command': get_decline_command('HASHTAGS'),
        'text': '–•—ç—à—Ç–µ–≥–∏',
        'reason': '–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ #—Ö—ç—à—Ç–µ–≥–æ–≤, –æ–Ω–∏ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
    }
    VEILED = {
        'command': get_decline_command('VEILED'),
        'text': '–ó–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–æ',
        'reason': '–ù–µ–ø–æ–Ω—è—Ç–Ω–∞ —Å—É—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à –æ—Ñ—Ñ–µ—Ä.'
    }
    OTHER = {
        'command': get_decline_command('OTHER'),
        'text': '–î—Ä—É–≥–æ–µ',
        'reason': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –ª–∏—á–Ω–æ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
    }
    CANCEL = {  # Cancel decline command
        'command': get_decline_command('CANCEL'),
        'text': 'üö´ –û—Ç–º–µ–Ω–∞',
    }


def get_decline_markup() -> InlineKeyboardMarkup:
    """ Returns cecline markup with reasons of decline """

    markup = InlineKeyboardMarkup()

    for command in DeclineCommands:
        markup.add(InlineKeyboardButton(
            command.value['text'],
            callback_data=command.value['command']
        ))
    return markup


def get_hashtag_markup() -> InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—é—â–∏–π —Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        `InlineKeyboardMarkup`: –†–∞–∑–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    hashtags = sorted(db_tags.tags, key=itemgetter('tag'))
    hashtag_markup = InlineKeyboardMarkup()
    for hashtag in hashtags:
        hashtag_button = InlineKeyboardButton(f'{hashtag.get("tag")}',
                                              callback_data=f'{hashtag.get("tag")}')
        hashtag_markup.add(hashtag_button)

    hashtag_markup.add(InlineKeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                            callback_data='end_button'))
    hashtag_markup.add(InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞',
                                            callback_data='/post_processing reset'))
    return hashtag_markup


async def on_error_message_reply(message: Message, bot: AsyncTeleBot):
    """–•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        bot (AsyncTeleBot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    """
    message_type = message.content_type
    text = message.text
    params = get_params_for_message(text, message)
    params['chat_id'] = bot.config['CHAT_ID']
    params['entities'] = message.entities
    await get_send_procedure(message_type, bot)(**params)


async def decline_handler(call: CallbackQuery, bot: AsyncTeleBot):
    """ Decline handler

    Args:
        call (CallbackQuery): CallbackQuery object.
        bot (AsyncTeleBot): Bot object.
    """
    log.info('Decline handler: %s', call.data)

    decline_action = call.data.split(' ')[2] \
        if len(call.data.split(' ')) > 2 \
        else None

    match decline_action:
        case None:
            decline_markup = get_decline_markup()
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                                reply_markup=decline_markup)
            return
        case 'CANCEL':
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                                reply_markup=create_markup())
            return
        case action:
            decline_command = DeclineCommands[action] or None
            if decline_command is None:
                return

            message_document = messages.get(Query().msg_id == call.message.id)
            html_text = string_builder(
                message_document, remove_meta=False, add_sign=False)

            new_text = f'{html_text}'\
                '\n\n‚ùå–û–¢–ö–õ–û–ù–ï–ù–û‚ùå' \
                '\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b>'\
                f'\n{decline_command.value["reason"]}'

            await edit_message(bot, call.message, new_text)
            await send_decline_notification_to_group(decline_command.value['reason'], call, bot)


async def on_post_processing(call: CallbackQuery, bot: AsyncTeleBot):
    """–•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        `call (CallbackQuery)`: –û–±—ä–µ–∫—Ç callback'–∞.
        `bot (AsyncTeleBot)`: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not check_permissions(call.from_user.id):
        return

    action = call.data.split(' ')[1]

    message = call.message
    saved_message = messages.get(Query().msg_id == message.id)

    admin_user = db_admins.get_admin_by_id(call.from_user.id)
    sign = admin_user.get('sign', '')

    message_data = {
        **saved_message,
        'sign': sign,
        'tags': None,
    }
    message_id = messages.update(
        message_data, Query().msg_id == saved_message['msg_id'])
    log.info('New message in db: %s', message_id)

    log.info('method: on_post_processing'
             'message: callback data from callback query id %s is \'%s\'', call.id, action)
    match action:
        case 'accept':
            await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                                reply_markup=get_hashtag_markup())
        case 'decline':
            await decline_handler(call, bot)
        case 'reset':
            log.info('Reset message %s', message.id)
            messages.update({'tags': None}, Query().msg_id == message.id)
            meta = make_meta_string(saved_message['from'])
            new_text = saved_message.get('html_text') + meta

            await edit_message(bot, message, new_text, reply_markup=create_markup())

    log.info('method: on_post_processing '
             'message with chat_id %s and message_Id %s was accepted '
             '%s, %s, %s',
             call.message.chat.id, call.message.id, call.id, action, call.message)


async def on_hashtag_choose(call: CallbackQuery, bot: AsyncTeleBot):
    """–•–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        `call (CallbackQuery)`: –û–±—ä–µ–∫—Ç callback'–∞.
        `bot (AsyncTeleBot)`: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    """
    log.info('method: on_hashtag_choose'
             'message: callback data from callback query id %s is \'%s\'', call.id, call.data)
    saved_message = messages.get(Query().msg_id == call.message.id)

    hashtag = call.data
    log.info('message: %s', saved_message)

    tags = set(saved_message.get('tags') or [])
    if hashtag not in tags:
        tags.add(hashtag)
    else:
        tags.remove(hashtag)

    tags = list(tags)

    log.info('tags: %s', str(tags))

    _ = messages.update({'tags': tags}, doc_ids=[saved_message.doc_id])

    log.info('update: %s', _)

    message = messages.get(Query().msg_id == call.message.id)
    log.info('\nBEFORE STRING BUILDER: %s', message)

    # Remove hastags and space after hastags, before readding it
    message['html_text'] = strip_hashtags(
        get_html_text_of_message(call.message)).strip()

    html__text = string_builder(message, remove_meta=False, add_sign=False)

    await edit_message(bot, call.message, html__text,
                       reply_markup=get_hashtag_markup())

    log.info('method: on_hashtag_choose'
             'caption was edited, callback data from callback query'
             ' id %s is \'%s\', current message: %s',
             call.id, call.data, call.message)


async def send_post_to_group(call: CallbackQuery, bot: AsyncTeleBot):
    """–•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É.

    Args:
        `call (CallbackQuery)`: –û–±—ä–µ–∫—Ç callback'–∞.
        `bot (AsyncTeleBot)`: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    """
    log.info('call message from user: %s', call.from_user.username)
    message_type = call.message.content_type

    message = messages.get(Query().msg_id == call.message.id)
    html_text = string_builder(message)

    params = get_params_for_message(html_text, call.message)
    params['chat_id'] = bot.config['CHAT_ID']

    await get_send_procedure(message_type, bot)(**params)
    await bot.edit_message_reply_markup(call.message.chat.id,
                                        message_id=call.message.message_id,
                                        reply_markup='')

    result = messages.remove(Query().id == call.message.id)
    log.info('method: send_message_to_group,removed resulted message from query, message: %s',
             result)
    log.info('method: send_message_to_group'
             'message: message with id %s '
             'message: \'%s\' is sended', call.message.id, html_text)


async def send_decline_notification_to_group(
        reason_text: str, call: CallbackQuery, bot: AsyncTeleBot):
    """–•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É.

    Args:
        `call (CallbackQuery)`: –û–±—ä–µ–∫—Ç callback'–∞.
        `bot (AsyncTeleBot)`: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    """
    log.info('call message from user: %s', call.from_user.username)

    message = messages.get(Query().msg_id == call.message.id)
    moderator_link = get_user_link(call.json['from'], '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    user_link = get_user_link(message['from'])

    # pylint: disable=line-too-long
    text_html = f'‚ùóÔ∏è{user_link}, –í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href="https://t.me/biznesschatt/847154">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a> –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ {moderator_link}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.' \
        "\n\n<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>" \
        f"\n{reason_text}"

    msg = await bot.send_message(bot.config['CHAT_ID'], text_html, disable_web_page_preview=True)

    removed_message_id = messages.remove(Query().id == call.message.id)
    log.info('method: send_decline_notification_to_group,removed resulted message from query, message: %s',
             removed_message_id)
    log.info('method: send_decline_notification_to_group'
             'message: message with id %s '
             'message: \'%s\' is sended', call.message.id, text_html)

    await asyncio.sleep(60)
    await bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
